#!/usr/bin/env node

const fs = require('fs');
const axios = require('axios');
const chalk = require('chalk');
const program  = require('commander');
const inquirer = require('inquirer');
const showdown = require('showdown');

const converter = new showdown.Converter();

const utils = require('./utils');
const globals = require('./globals');

program
	.description('Write tech-blog article to https://tdls.dev using markdown file\n  the first line of the file should not be blank, it is considered as title of the article.')
	.option('-f, --file <file-path-required>', 'File path') 
	.option('-d, --deleteMode', 'Delete mode', false)
	.option('-i, --logId <log-id-required>', 'Id of the log which will be updated or deleted') 
	.parse(process.argv);

/**
 *	Options 
 */
const filePath = program.file; 
const logId = program.logId;
const deleteMode = program.deleteMode;

/**
 *	Validation	
 */

if (!deleteMode && !filePath && !logId) {
	console.error(chalk.red.bold('\nOptions required'));
	program.help();
	process.exit(1);
}

if (!deleteMode && !filePath) {
	console.error(chalk.red.bold('\nFile path required'));
	program.help();
	process.exit(1);
}

if (deleteMode && !logId) {
	console.error(chalk.red.bold('\nlogId required in deleteMode'));
	program.help();
	process.exit(1);
}

/**
 *	Verbose	
 */
console.log(chalk.green.bold('Log command'));

/**
 *	Do something
 */
const { KEY_FILE } = globals;
const logRoute= '/logs/';
const logDeleteRoute= '/logs/delete';

if (!fs.existsSync(KEY_FILE)) {
	console.log(chalk.red('Key file doesn\'t exist!'));
	console.log(chalk.yellow('You can get a key-pair using "td keygen"'));
	process.exit(1);
}

const keyText = fs.readFileSync(KEY_FILE, 'utf-8');
const { firstKey, secondKey }= JSON.parse(keyText); 

const createOrUpdateLog = async () => {
	const md = fs.readFileSync(filePath, 'utf-8');
	const title = md.split('\n')[0].replace(/#/gi,'').trim();
	const htmlBody = converter.makeHtml(md);

	try {
		const payload = { firstKey, secondKey, title, htmlBody, logId };
		const { data } = await axios.post(globals.API + logRoute, payload);
		// [TODO] refactoring
		if (data.status == 'success')
			console.log(chalk.yellow(data.msg));
		else 
			console.log(chalk.red.bold(data.msg));

	} catch (error) {
		console.error(error);
	}
}

const deleteLog = async () => {
	try {
		const payload = { firstKey, secondKey, logId };
		const questions = [
			{
				message: 'You really want to delete ' + chalk.yellow('https://tdls.dev/logs/' + chalk.red.bold(logId)),
				type: 'confirm',
				name: 'confirm',
				default: false,
			}	
		];
		const answers = await inquirer.prompt(questions);
		if (!answers.confirm) {
			console.log(chalk.yellow.bold(globals.NH_MSG));	
			return;
		}
		const { data } = await axios.post(globals.API + logDeleteRoute, payload);	
		if (data.status == 'success')
			console.log(chalk.yellow(data.msg));
		else 
			console.log(chalk.red.bold(data.msg));

	}	catch(error) {
		console.error(error);	
	}
}

if (!deleteMode) {
	createOrUpdateLog();
} else {
	deleteLog();
}
