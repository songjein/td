#!/usr/bin/env node

const fs = require('fs');
const axios = require('axios');
const chalk = require('chalk');
const program  = require('commander');
const inquirer = require('inquirer');
const showdown = require('showdown');

const converter = new showdown.Converter();

const utils = require('./utils');
const globals = require('./globals');

program
	.description('Write tech-blog article to https://tdls.dev using markdown file\n  the first line of the file should not be blank, it is considered as title of the article.')
	.option('-f, --file <file-path-required>', 'File path') 
	.option('-d, --deleteMode', 'Delete mode', false)
	.option('-i, --logId <log-id-required>', 'Id of the log which will be updated or deleted') 
	.parse(process.argv);

/**
 *	Options 
 */
const filePath = program.file; 
const logId = program.logId;
const deleteMode = program.deleteMode;

/**
 *	Validation	
 */

if (!deleteMode && !filePath && !logId) {
	console.error(chalk.red.bold('\nOptions required'));
	program.help();
	process.exit(1);
}

if (!deleteMode && !filePath) {
	console.error(chalk.red.bold('\nFile path required'));
	program.help();
	process.exit(1);
}

if (deleteMode && !logId) {
	console.error(chalk.red.bold('\nlogId required in deleteMode'));
	program.help();
	process.exit(1);
}

/**
 *	Verbose	
 */
console.log(chalk.green.bold('Log command'));

/**
 *	Do something
 */
const { KEY_FILE } = globals;
const logRoute= '/logs/';
const logDeleteRoute= '/logs/delete';

utils.notExistKeyFileExitProcess ();

const keyText = fs.readFileSync(KEY_FILE, 'utf-8');
const { firstKey, secondKey }= JSON.parse(keyText); 

const createOrUpdateLog = async () => {
	const md = fs.readFileSync(filePath, 'utf-8');

	// first line
	const titlePattern = /title\s*:\s*.*\n/;
	const matchedTitle = titlePattern.exec(md); 

	// find title [TODO] 비어있을 경우 예외 추가
	let title = undefined;
	if (!matchedTitle) {
		console.log(
			chalk.red('You must include the title in the first line of .md file.')
		);
		console.log(chalk.yellow('ex) \'title: titleOfYourArticle\''));
		return;
	} else {
		title = matchedTitle[0].split(':')[1].trim();
		console.log('title:', chalk.yellow(title));	
	}

	// find sourceList (sources)
	const sourceListPattern = /sources\s*:\s*.*\n/;
	const matchedSourceList = sourceListPattern.exec(md);

	let sourceList = undefined;
	if (matchedSourceList) {
		sourceList = matchedSourceList[0].split(':')[1].split(',').map(word => parseInt(word.trim())).filter(num => !isNaN(num));
		console.log('Source list detected:', sourceList);
	} else {
		console.log(chalk.red(chalk.yellow('Source list') + ' is not detected'));
		console.log(chalk.yellow(' ex) sources: log_id1, log_id2 (in the second line of .md file)'));	
	}

	// find tagList
	const tagListPattern = /tags\s*:\s*.*\n/;
	const matchedTagList = tagListPattern.exec(md);

	let tagList = undefined;
	if (matchedTagList) {
		tagList = matchedTagList[0].split(':')[1].split(',').map(word => word.trim()).filter(word => word.length > 0);	
		console.log('Tag list detected:', tagList);
	} else {
		console.log(chalk.red(chalk.yellow('Tag list') + ' is not detected'));
		console.log(chalk.yellow(' ex) tag: tag_1, tag_2 (in the third line of .md file)'));	
	}

	
	// content of an article
	let htmlBody = undefined;	
	htmlBody = converter.makeHtml(md.split(';;;').slice(1).join(';;;'));
	console.log(htmlBody);
	
	if (logId) {
		const questions = [
			{
				message: 'You really want to update ' + chalk.yellow('https://tdls.dev/logs/' + chalk.red.bold(logId) + ' ?') + '\n' + chalk.yellow('log ' + chalk.red.bold('#' + logId) + ' will be overwritten'),
				type: 'confirm',
				name: 'confirm',
				default: false,
			}	
		];
		const answers = await inquirer.prompt(questions);
		if (!answers.confirm) {
			console.log(chalk.yellow.bold(globals.NH_MSG));	
			return;
		}
	}

	try {
		const payload = { firstKey, secondKey, title, sourceList, tagList, htmlBody, logId };
		const { data } = await axios.post(globals.API + logRoute, payload);
		utils.showResult(data);

	} catch (error) {
		console.error(error);
	}
}

const deleteLog = async () => {
	try {
		const payload = { firstKey, secondKey, logId };
		const questions = [
			{
				message: 'You really want to delete ' + chalk.yellow('https://tdls.dev/logs/' + chalk.red.bold(logId) + ' ?'),
				type: 'confirm',
				name: 'confirm',
				default: false,
			}	
		];
		const answers = await inquirer.prompt(questions);
		if (!answers.confirm) {
			console.log(chalk.yellow.bold(globals.NH_MSG));	
			return;
		}
		const { data } = await axios.post(globals.API + logDeleteRoute, payload);	
		utils.showResult(data);

	}	catch(error) {
		console.error(error);	
	}
}

if (!deleteMode) {
	createOrUpdateLog();
} else {
	deleteLog();
}
