#!/usr/bin/env node

/**
 *	TODO: 실제 채널 ls 기능 추가
 */

const program  = require('commander');
const chalk = require('chalk');

const fs = require('fs');

const settings = require('./settings');

const axios = require('axios');

const EMPTY_MSG = "Empty!, you can add an item using 'td add'"
 
let options = {
	host: 'localhost',
	port: 48484,
	headers: {
		'Content-Type': 'application/json'
	}
}

program
	.description('List todo items')
	.option('-n, --number [optional]', 'Show n-items only')
	.option('-c, --channel', 'Show items from channels, default:false', false)
	.parse(process.argv);

/**
 *	Options
 */
const number = program.number ? program.number : -1;
const channel = program.channel;

/**
 *	Validation
 */
if (false) { /* vali */ }

/**
 *	Verbose	
 */
console.log(chalk.green.bold('ls command'));
	
/**
 *	Read JSON file	
 */
let _todos = []
let _channels = []; // [TODO] deprecated
const SUBCHFILE = settings.SUBCHFILE;
const TODOFILE = settings.TODOFILE;

fs.readFile(TODOFILE, 'utf-8', (err, data) => {
	if (err) {
		console.log(chalk.yellow.bold(EMPTY_MSG));
	} else if (!channel) {
		_todos = JSON.parse(data);
		showTodos(_todos);
	} else { 
		console.log('will show items from channels');	
	} 
});

/**
 *	show todo
 *	using global variable '_todos'
 *	[TODO] 채널에 대한 아이템을 같이 보여주려하다보니 복합해짐.
 *	따라서, 별도의 옵션이 전달된 경우에만 구독하는 채널에 대한 item 리스트를 별도로 보여줌
 */
function showTodos(todos) {
	if (todos.length == 0) {
		console.log(chalk.yellow.bold(EMPTY_MSG));
		return;
	}
	todos.forEach((item, idx) => {
		if (number > 0 && number <= idx) return false;
		// [TODO-deprecated] 기존의 채널에 대한 처리 
		/*
		if ("ch" in item && !woc) { 
			const chIdx = getChIdx(item.ch);
			const bg = getBGColor(chIdx);
			console.log(chalk.cyan(idx + ". ", bg(item.todo)));
		}
		*/
		let msg = chalk.yellow.bold(item.todo);
		if (idx < 3) 
			console.log(chalk.red(idx + ". "), msg);
		else
			console.log(chalk.cyan(idx + ". "), msg);
	});
}

/**
 * get index of a channel
 * using global variable ; _channels
 */
function getChIdx(id) {
	for (let i = 0 ; i < _channels.length; i++)
		if (_channels[i].id == id) return i;
}

/**
 *	return chalk BGcolor function
 */
function getBGColor(idx) {
	switch(idx % 4) {
		case 0:
			return chalk.bgWhite.black;
		case 1:
			return chalk.bgYellow.black;
		case 2:
			return chalk.bgMagenta.white;
		case 3:
			return chalk.bgCyan.black;
	}
}
