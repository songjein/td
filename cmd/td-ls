#!/usr/bin/env node

const program  = require('commander');
const chalk = require('chalk');

const fs = require('fs');

const request = require('request');

let options = {
	host: '192.168.182.195',
	port: 48484,
	headers: {
		'Content-Type': 'application/json'
	}
}

program
	.option('-n, --number [optional]', 'Show channel items')
	.option('-c, --channel [optional]', 'Show channel items')
	.option('-w, --withoutch [optional]', 'Show without channel items')
	.parse(process.argv);

/**
 *	Options
 */
const number = program.number ? program.number : -1;
const wc = program.channel;
const woc = program.withoutch;

/**
 *	Validation
 */
if (false) { /* vali */ }

/**
 *	Verbose	
 */
console.log(chalk.green.bold('List command'));
	
/**
 *	Read JSON file	
 */
let todos = []
let channels = [];

fs.readFile('todos.json', 'utf-8', (err, data) => {
	if (err) {
		console.error(chalk.red.bold(err));
		console.log(chalk.yellow.bold("--> New file will be created"));
	} else {
		todos = JSON.parse(data);

		// channel 정보 가져오기from subch.json
		if (fs.existsSync('subch.json')) {
			channels = JSON.parse(fs.readFileSync('subch.json', 'utf8'));
			console.log("Subscribed channel list", channels)
		}

		// api request
		if (channels.length == 0) {
			if (todos.length == 0) {
				console.log(chalk.yellow.bold("[Empty]"));	
			}
			todos.forEach((item, idx) => {
				if (number > 0 && number <= idx) return false;
				if ("ch" in item && !woc) console.log(chalk.cyan(idx + ". ", chalk.inverse(item.todo)));
				else	console.log(chalk.cyan(idx + ". "), chalk.yellow.bold(item.todo));	
			});
		}
		
		// channel이 하나 이상일 경우 코드
		for (i = 0; i < channels.length; i++ ){
			ci = i;
			request({
				url: 'http://192.168.182.195:48484/getch/' + channels[i].id
			}, (error, response, body) => {
				let ts = JSON.parse(body).todos;
				// 싱크가 맞지 않는 todo 추가
				for (t = 0 ; t < ts.length; t ++){
					if (!channels[ci]["synced"].includes(ts[t].time)){
						channels[ci]["synced"].push(ts[t].time);
						todos.unshift({"todo": ts[t].todo, "secret": false, "ch": true});
					}
				}
				//console.log(channels);
				//console.log(todos);

				// subch.json 및 todos.json 갱신
				////

				if (todos.length == 0) {
					console.log(chalk.yellow.bold("[Empty]"));	
				}
				todos.forEach((item, idx) => {
					if (number > 0 && number <= idx) return false;
					if ("ch" in item && !woc) console.log(chalk.cyan(idx + ". ", chalk.inverse(item.todo)));
					else	console.log(chalk.cyan(idx + ". "), chalk.yellow.bold(item.todo));	
				});
				////////////////////////////
			});
		}
		// api request end
	}
});

